要获取编译程序的运行时间和运行空间，并在超过限制后返回结果，可以使用Docker以及一些额外的工具和技术来实现。下面是一个基本的实现步骤：

创建一个带有资源限制的Docker容器，包括CPU时间限制和内存限制。可以使用Docker的资源限制功能或者结合Linux的cgroups来实现。

将用户提交的代码复制到Docker容器中，并设置相应的编译环境。

在Docker容器中执行编译过程，可以使用适当的编译器或解释器。

启动一个计时器，在编译过程中记录消耗的时间。

使用监控工具，如Linux的perf工具或Docker的stats命令，监测Docker容器的资源使用情况，包括CPU和内存的消耗。

如果编译时间超过设定的时间限制，终止编译过程，并返回相应的结果，如编译超时。

如果编译成功，将编译得到的可执行文件保存起来，供后续的执行过程使用。

在执行阶段，使用相同的Docker容器设置资源限制，并在容器中执行用户代码。

启动一个计时器，在执行过程中记录消耗的时间。

使用监控工具监测Docker容器的资源使用情况，包括CPU和内存的消耗。

如果执行时间超过设定的时间限制，终止执行过程，并返回相应的结果，如运行超时。

在执行过程中，还可以根据需要检查其他资源使用情况，如磁盘空间的消耗。

如果执行正常完成，将输出结果返回给评测引擎进行判断。

通过上述步骤，您可以在Docker容器中监控编译和执行过程的时间消耗以及资源使用情况，并根据设定的限制条件在超过限制后返回相应的结果。需要注意的是，具体的实现方式可能因为所用的监控工具和技术的不同而有所变化，您可以根据具体需求选择合适的工具和技术来实现。